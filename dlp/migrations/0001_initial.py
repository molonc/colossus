# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2019-07-12 18:40
from __future__ import unicode_literals

import core.helpers
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DlpLane',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flow_cell_id', models.CharField(max_length=50, verbose_name='Flow cell/Lane ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
                ('sequencing_date', models.DateTimeField(null=True)),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='DlpLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pool_id', models.CharField(max_length=50, null=True, verbose_name='Chip ID')),
                ('jira_ticket', models.CharField(blank=True, max_length=50, null=True, verbose_name='Jira ticket')),
                ('num_sublibraries', models.IntegerField(blank=True, default=0, null=True, verbose_name='Number of sublibraries')),
                ('exclude_from_analysis', models.BooleanField(default=False)),
                ('title', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Title')),
                ('quality', models.DecimalField(decimal_places=2, default=0.75, max_digits=10, verbose_name='Quality')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('failed', models.BooleanField(default=False, verbose_name='Failed')),
                ('projects', models.ManyToManyField(blank=True, to='core.Project', verbose_name='Project')),
                ('relates_to_dlp', models.ManyToManyField(blank=True, to='dlp.DlpLibrary', verbose_name='Relates to (DLP)')),
            ],
            options={
                'ordering': ('sample', 'pool_id'),
            },
            bases=(models.Model, core.helpers.FieldValue, core.helpers.LibraryAssistant),
        ),
        migrations.CreateModel(
            name='DlpLibraryConstructionInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chip_format', models.CharField(blank=True, choices=[('W', 'Wafergen'), ('M', 'Microfluidic'), ('B', 'Bulk'), ('O', 'Other')], default='W', max_length=50, null=True, verbose_name='Chip format')),
                ('library_construction_method', models.CharField(blank=True, default='Nextera (Illumina)', max_length=50, null=True, verbose_name='Library construction method')),
                ('library_type', models.CharField(blank=True, default='genome', max_length=50, null=True, verbose_name='Library type')),
                ('library_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Library notes')),
                ('library_prep_date', models.DateField(blank=True, null=True, verbose_name='Library prep date')),
                ('number_of_pcr_cycles', models.IntegerField(blank=True, null=True, verbose_name='Number of PCR cycles')),
                ('protocol', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Protocol')),
                ('spotting_location', models.CharField(blank=True, choices=[('AD', 'Aparicio Lab - Deckard'), ('AR', 'Aparicio Lab - Rachael'), ('H', 'Hansen Lab'), ('G', 'GSC')], max_length=50, null=True, verbose_name='Spotting location')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dlp.DlpLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='DlpLibraryQuantificationAndStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_size', models.IntegerField(blank=True, null=True, verbose_name='Average size (bp)')),
                ('dna_concentration_nm', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='DNA concentration (nM)')),
                ('dna_concentration_ngul', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='DNA concentration (ng/uL)')),
                ('dna_volume', models.CharField(blank=True, max_length=50, null=True, verbose_name='DNA volume (uL)')),
                ('freezer', models.CharField(blank=True, max_length=50, null=True, verbose_name='Freezer')),
                ('rack', models.IntegerField(blank=True, null=True, verbose_name='Rack')),
                ('shelf', models.IntegerField(blank=True, null=True, verbose_name='Shelf')),
                ('box', models.IntegerField(blank=True, null=True, verbose_name='Box')),
                ('position_in_box', models.IntegerField(blank=True, null=True, verbose_name='Position in box')),
                ('library_tube_label', models.CharField(blank=True, max_length=50, null=True, verbose_name='Library tube label')),
                ('quantification_method', models.CharField(blank=True, default='Bioanalyzer', max_length=50, null=True, verbose_name='Quantification method')),
                ('size_range', models.CharField(blank=True, max_length=50, null=True, verbose_name='Size range (bp)')),
                ('size_selection_method', models.CharField(blank=True, default='AmpureXP', max_length=50, null=True, verbose_name='Size selection method')),
                ('storage_medium', models.CharField(blank=True, default='TE 10:0.1', max_length=50, null=True, verbose_name='Storage medium')),
                ('agilent_bioanalyzer_xad', models.FileField(blank=True, max_length=200, null=True, upload_to=core.helpers.upload_dlp_library_path, verbose_name='Agilent bioanalyzer xad file')),
                ('agilent_bioanalyzer_image', models.FileField(blank=True, max_length=200, null=True, upload_to=core.helpers.upload_dlp_library_path, verbose_name='Agilent bioanalyzer image file')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dlp.DlpLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='DlpLibrarySampleDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_spot_date', models.DateField(default=datetime.date.today, verbose_name='Sample spot date')),
                ('spotting_location', models.CharField(blank=True, choices=[('AD', 'Aparicio Lab - Deckard'), ('AR', 'Aparicio Lab - Rachael'), ('H', 'Hansen Lab'), ('G', 'GSC')], max_length=50, null=True, verbose_name='Spotting location')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('lims_vial_barcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='LIMS vial barcode')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dlp.DlpLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='DlpSequencing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rev_comp_override', models.CharField(blank=True, choices=[('i7,i5', 'No Reverse Complement'), ('i7,rev(i5)', 'Reverse Complement i5'), ('rev(i7),i5', 'Reverse Complement i7'), ('rev(i7),rev(i5)', 'Reverse Complement i7 and i5')], default=None, max_length=50, null=True, verbose_name='Reverse Complement Override')),
                ('adapter', models.CharField(blank=True, default='CTGTCTCTTATACACATCT', max_length=50, null=True, verbose_name='Adapter')),
                ('format_for_data_submission', models.CharField(blank=True, default='fastq', max_length=50, null=True, verbose_name='Format for data dissemination')),
                ('index_read_type', models.CharField(blank=True, default='Dual Index (i7 and i5)', max_length=50, null=True, verbose_name='Index read type')),
                ('index_read1_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read1 length')),
                ('index_read2_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read2 length')),
                ('read_type', models.CharField(blank=True, choices=[('P', 'PET'), ('S', 'SET')], default='P', max_length=50, null=True, verbose_name='Read type')),
                ('read1_length', models.IntegerField(blank=True, default=150, null=True, verbose_name='Read1 length')),
                ('read2_length', models.IntegerField(blank=True, default=150, null=True, verbose_name='Read2 length')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N500', 'NextSeq500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='HX', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('sequencing_output_mode', models.CharField(blank=True, choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=50, null=True, verbose_name='Sequencing output mode')),
                ('short_description_of_submission', models.CharField(blank=True, max_length=150, null=True, verbose_name='Short description of submission')),
                ('submission_date', models.DateField(default=datetime.date.today, verbose_name='Submission date')),
                ('number_of_lanes_requested', models.PositiveIntegerField(default=1, verbose_name='Sequencing Goal')),
                ('lane_requested_date', models.DateField(null=True)),
                ('gsc_library_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='GSC library ID')),
                ('sequencer_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencer ID')),
                ('sequencing_center', models.CharField(choices=[('BCCAGSC', 'BCCAGSC'), ('UBCBRC', 'UBCBRC')], default='BCCAGSC', max_length=50, null=True, verbose_name='Sequencing center')),
                ('sequencer_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sequencing notes')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dlp.DlpLibrary', verbose_name='Library')),
                ('relates_to', models.ManyToManyField(blank=True, related_name='_dlpsequencing_relates_to_+', to='dlp.DlpSequencing', verbose_name='Relates to')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='HistoricalDlpLane',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('flow_cell_id', models.CharField(max_length=50, verbose_name='Flow cell/Lane ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
                ('sequencing_date', models.DateTimeField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sequencing', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dlp.DlpSequencing', verbose_name='Sequencing')),
            ],
            options={
                'verbose_name': 'historical dlp lane',
                'db_table': 'dlp_history_lane',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDlpLibrary',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('pool_id', models.CharField(max_length=50, null=True, verbose_name='Chip ID')),
                ('jira_ticket', models.CharField(blank=True, max_length=50, null=True, verbose_name='Jira ticket')),
                ('num_sublibraries', models.IntegerField(blank=True, default=0, null=True, verbose_name='Number of sublibraries')),
                ('exclude_from_analysis', models.BooleanField(default=False)),
                ('title', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Title')),
                ('quality', models.DecimalField(decimal_places=2, default=0.75, max_digits=10, verbose_name='Quality')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('failed', models.BooleanField(default=False, verbose_name='Failed')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sample', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Sample', verbose_name='Primary Sample')),
            ],
            options={
                'verbose_name': 'historical dlp library',
                'db_table': 'dlp_history_library',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDlpLibraryConstructionInformation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('chip_format', models.CharField(blank=True, choices=[('W', 'Wafergen'), ('M', 'Microfluidic'), ('B', 'Bulk'), ('O', 'Other')], default='W', max_length=50, null=True, verbose_name='Chip format')),
                ('library_construction_method', models.CharField(blank=True, default='Nextera (Illumina)', max_length=50, null=True, verbose_name='Library construction method')),
                ('library_type', models.CharField(blank=True, default='genome', max_length=50, null=True, verbose_name='Library type')),
                ('library_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Library notes')),
                ('library_prep_date', models.DateField(blank=True, null=True, verbose_name='Library prep date')),
                ('number_of_pcr_cycles', models.IntegerField(blank=True, null=True, verbose_name='Number of PCR cycles')),
                ('protocol', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Protocol')),
                ('spotting_location', models.CharField(blank=True, choices=[('AD', 'Aparicio Lab - Deckard'), ('AR', 'Aparicio Lab - Rachael'), ('H', 'Hansen Lab'), ('G', 'GSC')], max_length=50, null=True, verbose_name='Spotting location')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dlp.DlpLibrary', verbose_name='Library')),
            ],
            options={
                'verbose_name': 'historical dlp library construction information',
                'db_table': 'dlp_history_library_construction_information',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDlpLibraryQuantificationAndStorage',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('average_size', models.IntegerField(blank=True, null=True, verbose_name='Average size (bp)')),
                ('dna_concentration_nm', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='DNA concentration (nM)')),
                ('dna_concentration_ngul', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='DNA concentration (ng/uL)')),
                ('dna_volume', models.CharField(blank=True, max_length=50, null=True, verbose_name='DNA volume (uL)')),
                ('freezer', models.CharField(blank=True, max_length=50, null=True, verbose_name='Freezer')),
                ('rack', models.IntegerField(blank=True, null=True, verbose_name='Rack')),
                ('shelf', models.IntegerField(blank=True, null=True, verbose_name='Shelf')),
                ('box', models.IntegerField(blank=True, null=True, verbose_name='Box')),
                ('position_in_box', models.IntegerField(blank=True, null=True, verbose_name='Position in box')),
                ('library_tube_label', models.CharField(blank=True, max_length=50, null=True, verbose_name='Library tube label')),
                ('quantification_method', models.CharField(blank=True, default='Bioanalyzer', max_length=50, null=True, verbose_name='Quantification method')),
                ('size_range', models.CharField(blank=True, max_length=50, null=True, verbose_name='Size range (bp)')),
                ('size_selection_method', models.CharField(blank=True, default='AmpureXP', max_length=50, null=True, verbose_name='Size selection method')),
                ('storage_medium', models.CharField(blank=True, default='TE 10:0.1', max_length=50, null=True, verbose_name='Storage medium')),
                ('agilent_bioanalyzer_xad', models.TextField(blank=True, max_length=200, null=True, verbose_name='Agilent bioanalyzer xad file')),
                ('agilent_bioanalyzer_image', models.TextField(blank=True, max_length=200, null=True, verbose_name='Agilent bioanalyzer image file')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dlp.DlpLibrary', verbose_name='Library')),
            ],
            options={
                'verbose_name': 'historical dlp library quantification and storage',
                'db_table': 'dlp_history_library_q_and_s',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDlpLibrarySampleDetail',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('sample_spot_date', models.DateField(default=datetime.date.today, verbose_name='Sample spot date')),
                ('spotting_location', models.CharField(blank=True, choices=[('AD', 'Aparicio Lab - Deckard'), ('AR', 'Aparicio Lab - Rachael'), ('H', 'Hansen Lab'), ('G', 'GSC')], max_length=50, null=True, verbose_name='Spotting location')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('lims_vial_barcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='LIMS vial barcode')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dlp.DlpLibrary', verbose_name='Library')),
            ],
            options={
                'verbose_name': 'historical dlp library sample detail',
                'db_table': 'dlp_history_library_sample_detail',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDlpSequencing',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('rev_comp_override', models.CharField(blank=True, choices=[('i7,i5', 'No Reverse Complement'), ('i7,rev(i5)', 'Reverse Complement i5'), ('rev(i7),i5', 'Reverse Complement i7'), ('rev(i7),rev(i5)', 'Reverse Complement i7 and i5')], default=None, max_length=50, null=True, verbose_name='Reverse Complement Override')),
                ('adapter', models.CharField(blank=True, default='CTGTCTCTTATACACATCT', max_length=50, null=True, verbose_name='Adapter')),
                ('format_for_data_submission', models.CharField(blank=True, default='fastq', max_length=50, null=True, verbose_name='Format for data dissemination')),
                ('index_read_type', models.CharField(blank=True, default='Dual Index (i7 and i5)', max_length=50, null=True, verbose_name='Index read type')),
                ('index_read1_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read1 length')),
                ('index_read2_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read2 length')),
                ('read_type', models.CharField(blank=True, choices=[('P', 'PET'), ('S', 'SET')], default='P', max_length=50, null=True, verbose_name='Read type')),
                ('read1_length', models.IntegerField(blank=True, default=150, null=True, verbose_name='Read1 length')),
                ('read2_length', models.IntegerField(blank=True, default=150, null=True, verbose_name='Read2 length')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N500', 'NextSeq500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='HX', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('sequencing_output_mode', models.CharField(blank=True, choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=50, null=True, verbose_name='Sequencing output mode')),
                ('short_description_of_submission', models.CharField(blank=True, max_length=150, null=True, verbose_name='Short description of submission')),
                ('submission_date', models.DateField(default=datetime.date.today, verbose_name='Submission date')),
                ('number_of_lanes_requested', models.PositiveIntegerField(default=1, verbose_name='Sequencing Goal')),
                ('lane_requested_date', models.DateField(null=True)),
                ('gsc_library_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='GSC library ID')),
                ('sequencer_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencer ID')),
                ('sequencing_center', models.CharField(choices=[('BCCAGSC', 'BCCAGSC'), ('UBCBRC', 'UBCBRC')], default='BCCAGSC', max_length=50, null=True, verbose_name='Sequencing center')),
                ('sequencer_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sequencing notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dlp.DlpLibrary', verbose_name='Library')),
            ],
            options={
                'verbose_name': 'historical dlp sequencing',
                'db_table': 'dlp_history_sequencing',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
