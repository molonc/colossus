# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2019-07-12 18:40
from __future__ import unicode_literals

import core.helpers
import datetime
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0001_initial'),
        ('dlp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalTenxChip',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('lab_name', models.CharField(blank=True, choices=[('SA', 'Sam Aparicio'), ('DH', 'David Huntsman')], default='SA', max_length=50, null=True, verbose_name='Lab Name')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical tenx chip',
                'db_table': 'tenx_history_chip',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxLane',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('flow_cell_id', models.CharField(max_length=50, verbose_name='Flow cell/Lane ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
                ('tantalus_datasets', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, null=True, size=None)),
                ('sequencing_date', models.DateTimeField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical tenx lane',
                'db_table': 'tenx_history_lane',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxLibrary',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Library Name')),
                ('jira_ticket', models.CharField(blank=True, max_length=50, null=True, verbose_name='Jira ticket')),
                ('experimental_condition', models.CharField(blank=True, max_length=1025, null=True, verbose_name='Experimental condition')),
                ('num_sublibraries', models.IntegerField(blank=True, default=0, null=True, verbose_name='Number of sublibraries')),
                ('chip_well', models.IntegerField(choices=[(0, 'NOT SET'), (1, 'WELL_1'), (2, 'WELL_2'), (3, 'WELL_3'), (4, 'WELL_4'), (5, 'WELL_5'), (6, 'WELL_6'), (7, 'WELL_7'), (8, 'WELL_8')], default=0)),
                ('condition', models.CharField(blank=True, max_length=50, null=True, verbose_name='Condition')),
                ('google_sheet', models.CharField(blank=True, max_length=255, null=True, verbose_name='Google Sheet Link')),
                ('description', models.TextField(blank=True, max_length=1024, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('failed', models.BooleanField(default=False, verbose_name='Failed')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical tenx library',
                'db_table': 'tenx_history_library',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxLibraryConstructionInformation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('library_construction_method', models.CharField(blank=True, default='10x Genomics', max_length=50, null=True, verbose_name='Library construction method')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('library_prep_location', models.CharField(blank=True, default='UBC-BRC', max_length=50, null=True, verbose_name='Library prep location')),
                ('chip_lot_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Chip lot number')),
                ('reagent_lot_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Reagent lot number')),
                ('library_type', models.CharField(blank=True, choices=[("5'", "5'"), ("3'", "3'"), ('V(D)J', 'V(D)J')], max_length=20, null=True, verbose_name='Library type')),
                ('index_used', models.CharField(blank=True, choices=[('SI_GA-A1,GGTTTACT,CTAAACGG,TCGGCGTC,AACCGTAA', 'SI-GA_A1'), ('SI-GA-A2,TTTCATGA,ACGTCCCT,CGCATGTG,GAAGGAAC', 'SI-GA-A2'), ('SI-GA-A3,CAGTACTG,AGTAGTCT,GCAGTAGA,TTCCCGAC', 'SI-GA-A3'), ('SI-GA-A4,TATGATTC,CCCACAGT,ATGCTGAA,GGATGCCG', 'SI-GA-A4'), ('SI-GA-A5,CTAGGTGA,TCGTTCAG,AGCCAATT,GATACGCC', 'SI-GA-A5'), ('SI-GA-A6,CGCTATGT,GCTGTCCA,TTGAGATC,AAACCGAG', 'SI-GA-A6'), ('SI-GA-A7,ACAGAGGT,TATAGTTG,CGGTCCCA,GTCCTAAC', 'SI-GA-A7'), ('SI-GA-A8,GCATCTCC,TGTAAGGT,CTGCGATG,AACGTCAA', 'SI-GA-A8'), ('SI-GA-A9,TCTTAAAG,CGAGGCTC,GTCCTTCT,AAGACGGA', 'SI-GA-A9'), ('SI-GA-A10,GAAACCCT,TTTCTGTC,CCGTGTGA,AGCGAAAG', 'SI-GA-A10'), ('SI-GA-A11,GTCCGGTC,AAGATCAT,CCTGAAGG,TGATCTCA', 'SI-GA-A11'), ('SI-GA-A12,AGTGGAAC,GTCTCCTT,TCACATCA,CAGATGGG', 'SI-GA-A12'), ('SI-GA-B1,GTAATCTT,TCCGGAAG,AGTTCGGC,CAGCATCA', 'SI-GA-B1'), ('SI-GA-B2,TACTCTTC,CCTGTGCG,GGACACGT,ATGAGAAA', 'SI-GA-B2'), ('SI-GA-B3,GTGTATTA,TGTGCGGG,ACCATAAC,CAACGCCT', 'SI-GA-B3'), ('SI-GA-B4,ACTTCATA,GAGATGAC,TGCCGTGG,CTAGACCT', 'SI-GA-B4'), ('SI-GA-B5,AATAATGG,CCAGGGCA,TGCCTCAT,GTGTCATC', 'SI-GA-B5'), ('SI-GA-B6,CGTTAATC,GCCACGCT,TTACTCAG,AAGGGTGA', 'SI-GA-B6'), ('SI-GA-B7,AAACCTCA,GCCTTGGT,CTGGACTC,TGTAGAAG', 'SI-GA-B7'), ('SI-GA-B8,AAAGTGCT,GCTACCTG,TGCTGTAA,CTGCAAGC', 'SI-GA-B8'), ('SI-GA-B9,CTGTAACT,TCTAGCGA,AGAGTGTG,GACCCTAC', 'SI-GA-B9'), ('SI-GA-B10,ACCGTATG,GATTAGAT,CTGACTGA,TGACGCCC', 'SI-GA-B10'), ('SI-GA-B11,GTTCCTCA,AGGTACGC,TAAGTATG,CCCAGGAT', 'SI-GA-B11'), ('SI-GA-B12,TACCACCA,CTAAGTTT,GGGTCAAG,ACTGTGGC', 'SI-GA-B12'), ('SI-GA-C1,CCACTTAT,AACTGGCG,TTGGCATA,GGTAACGC', 'SI-GA-C1'), ('SI-GA-C2,CCTAGACC,ATCTCTGT,TAGCTCTA,GGAGAGAG', 'SI-GA-C2'), ('SI-GA-C3,TCAGCCGT,CAGAGGCC,GGTCAATA,ATCTTTAG', 'SI-GA-C3'), ('SI-GA-C4,ACAATTCA,TGCGCAGC,CATCACTT,GTGTGGAG', 'SI-GA-C4'), ('SI-GA-C5,CGACTTGA,TACAGACT,ATTGCGTG,GCGTACAC', 'SI-GA-C5'), ('SI-GA-C6,ATTACTTC,TGCGAACT,GCATTCGG,CAGCGGAA', 'SI-GA-C6'), ('SI-GA-C7,GTCTCTCG,AATCTCTC,CGGAGGGA,TCAGAAAT', 'SI-GA-C7'), ('SI-GA-C8,GTTGAGAA,AGATCTGG,TCGATACT,CACCGCTC', 'SI-GA-C8'), ('SI-GA-C9,GCGCAGAA,ATCTTACC,TATGGTGT,CGAACCTG', 'SI-GA-C9'), ('SI-GA-C10,TCTCAGTG,GAGACTAT,CGCTTAGC,ATAGGCCA', 'SI-GA-C10'), ('SI-GA-C11,GAGGATCT,AGACCATA,TCCTGCGC,CTTATGAG', 'SI-GA-C11'), ('SI-GA-C12,TCTCGTTT,GGCTAGCG,ATGACCGC,CAAGTAAA', 'SI-GA-C12'), ('SI-GA-D1,CACTCGGA,GCTGAATT,TGAAGTAC,ATGCTCCG', 'SI-GA-D1'), ('SI-GA-D2,TAACAAGG,GGTTCCTC,ATCATGCA,CCGGGTAT', 'SI-GA-D2'), ('SI-GA-D3,ACATTACT,TTTGGGTA,CAGCCCAC,GGCAATGG', 'SI-GA-D3'), ('SI-GA-D4,CCCTAACA,ATTCCGAT,TGGATTGC,GAAGGCTG', 'SI-GA-D4'), ('SI-GA-D5,CTCGTCAC,GATCAGCA,ACAACAGG,TGGTGTTT', 'SI-GA-D5'), ('SI-GA-D6,CATGCGAT,TGATATTC,GTGATCGA,ACCCGACG', 'SI-GA-D6'), ('SI-GA-D7,ATTTGCTA,TAGACACC,CCACAGGG,GGCGTTAT', 'SI-GA-D7'), ('SI-GA-D8,GCAACAAA,TAGTTGTC,CGCCATCG,ATTGGCGT', 'SI-GA-D8'), ('SI-GA-D9,AGGAGATG,GATGTGGT,CTACATCC,TCCTCCAA', 'SI-GA-D9'), ('SI-GA-D10,CAATACCC,TGTCTATG,ACCACGAA,GTGGGTGT', 'SI-GA-D10'), ('SI-GA-D11,CTTTGCGG,TGCACAAA,AAGCAGTC,GCAGTTCT', 'SI-GA-D11'), ('SI-GA-D12,GCACAATG,CTTGGTAC,TGCACCGT,AAGTTGCA', 'SI-GA-D12'), ('SI-GA-E1,TGGTAAAC,GAAAGGGT,ACTGCTCG,CTCCTCTA', 'SI-GA-E1'), ('SI-GA-E2,GTGGTACC,TACTATAG,ACAAGGTA,CGTCCCGT', 'SI-GA-E2'), ('SI-GA-E3,AGGTATTG,CTCCTAGT,TCAAGGCC,GATGCCAA', 'SI-GA-E3'), ('SI-GA-E4,TTCGCCCT,GGATGGGC,AATCAATG,CCGATTAA', 'SI-GA-E4'), ('SI-GA-E5,CATTAGCG,TTCGCTGA,ACAAGAAT,GGGCTCTC', 'SI-GA-E5'), ('SI-GA-E6,CTGCGGCT,GACTCAAA,AGAAACTC,TCTGTTGG', 'SI-GA-E6'), ('SI-GA-E7,CACGCCTT,GTATATAG,TCTCGGGC,AGGATACA', 'SI-GA-E7'), ('SI-GA-E8,ATAGTTAC,TGCTGAGT,CCTACGTA,GAGCACCG', 'SI-GA-E8'), ('SI-GA-E9,TTGTTTCC,GGAGGAGG,CCTAACAA,AACCCGTT', 'SI-GA-E9'), ('SI-GA-E10,AAATGTGC,GGGCAAAT,TCTATCCG,CTCGCGTA', 'SI-GA-E10'), ('SI-GA-E11,AAGCGCTG,CGTTTGAT,GTAGCACA,TCCAATGC', 'SI-GA-E11'), ('SI-GA-E12,ACCGGCTC,GAGTTAGT,CGTCCTAG,TTAAAGCA', 'SI-GA-E12'), ('SI-GA-F1,GTTGCAGC,TGGAATTA,CAATGGAG,ACCCTCCT', 'SI-GA-F1'), ('SI-GA-F2,TTTACATG,CGCGATAC,ACGCGGGT,GAATTCCA', 'SI-GA-F2'), ('SI-GA-F3,TTCAGGTG,ACGGACAT,GATCTTGA,CGATCACC', 'SI-GA-F3'), ('SI-GA-F4,CCCAATAG,GTGTCGCT,AGAGTCGC,TATCGATA', 'SI-GA-F4'), ('SI-GA-F5,GACTACGT,CTAGCGAG,TCTATATC,AGGCGTCA', 'SI-GA-F5'), ('SI-GA-F6,CGGAGCAC,GACCTATT,ACTTAGGA,TTAGCTCG', 'SI-GA-F6'), ('SI-GA-F7,CGTGCAGA,AACAAGAT,TCGCTTCG,GTATGCTC', 'SI-GA-F7'), ('SI-GA-F8,CATGAACA,TCACTCGC,AGCTGGAT,GTGACTTG', 'SI-GA-F8'), ('SI-GA-F9,CAAGCTCC,GTTCACTG,TCGTGAAA,AGCATGGT', 'SI-GA-F9'), ('SI-GA-F10,GCTTGGCT,AAACAAAC,CGGGCTTA,TTCATCGG', 'SI-GA-F10'), ('SI-GA-F11,GCGAGAGT,TACGTTCA,AGTCCCAC,CTATAGTG', 'SI-GA-F11'), ('SI-GA-F12,TGATGCAT,GCTACTGA,CACCTGCC,ATGGAATG', 'SI-GA-F12'), ('SI-GA-G1,ATGAATCT,GATCTCAG,CCAGGAGC,TGCTCGTA', 'SI-GA-G1'), ('SI-GA-G2,TGATTCTA,ACTAGGAG,CAGCCACT,GTCGATGC', 'SI-GA-G2'), ('SI-GA-G3,CCTCATTC,AGCATCCG,GTGGCAAT,TAATGGGA', 'SI-GA-G3'), ('SI-GA-G4,GCGATGTG,AGATACAA,TTTCCACT,CACGGTGC', 'SI-GA-G4'), ('SI-GA-G5,GAGCAAGA,TCTGTGAT,CGCAGTTC,ATATCCCG', 'SI-GA-G5'), ('SI-GA-G6,CTGACGCG,GGTCGTAC,TCCTTCTT,AAAGAAGA', 'SI-GA-G6'), ('SI-GA-G7,GGTATGCA,CTCGAAAT,ACACCTTC,TAGTGCGG', 'SI-GA-G7'), ('SI-GA-G8,TATGAGCT,CCGATAGC,ATACCCAA,GGCTGTTG', 'SI-GA-G8'), ('SI-GA-G9,TAGGACGT,ATCCCACA,GGAATGTC,CCTTGTAG', 'SI-GA-G9'), ('SI-GA-G10,TCGCCAGC,AATGTTAG,CGATAGCT,GTCAGCTA', 'SI-GA-G10'), ('SI-GA-G11,TTATCGTT,AGCAGAGC,CATCTCCA,GCGGATAG', 'SI-GA-G11'), ('SI-GA-G12,ATTCTAAG,CCCGATTA,TGGAGGCT,GAATCCGC', 'SI-GA-G12'), ('SI-GA-H1,GTATGTCA,TGTCAGAC,CACGTCGG,ACGACATT', 'SI-GA-H1'), ('SI-GA-H2,TAATGACC,ATGCCTTA,GCCGAGAT,CGTATCGG', 'SI-GA-H2'), ('SI-GA-H3,CCAAGATG,AGGCCCGA,TACGTGAC,GTTTATCT', 'SI-GA-H3'), ('SI-GA-H4,GCCATTCC,CAAGAATT,TTGCCGGA,AGTTGCAG', 'SI-GA-H4'), ('SI-GA-H5,CCACTACA,GATTCTGG,TGCGGCTT,ATGAAGAC', 'SI-GA-H5'), ('SI-GA-H6,TAGGATAA,CCTTTGTC,GTACGCGG,AGCACACT', 'SI-GA-H6'), ('SI-GA-H7,AGCTATCA,CATATAAC,TCAGGGTG,GTGCCCGT', 'SI-GA-H7'), ('SI-GA-H8,TTGTTGAT,GCTCAACC,CAAAGTGG,AGCGCCTA', 'SI-GA-H8'), ('SI-GA-H9,ACACTGTT,CAGGATGG,GGCTGAAC,TTTACCCA', 'SI-GA-H9'), ('SI-GA-H10,GTAATTGC,AGTCGCTT,CACGAGAA,TCGTCACG', 'SI-GA-H10'), ('SI-GA-H11,GGCGAGTA,ACTTCTAT,CAAATACG,TTGCGCGC', 'SI-GA-H11'), ('SI-GA-H12,GACAGCAT,TTTGTACA,AGGCCGTG,CCATATGC', 'SI-GA-H12')], max_length=150, null=True, verbose_name='Index used')),
                ('pool', models.CharField(blank=True, max_length=150, null=True, verbose_name='Pool')),
                ('concentration', models.PositiveIntegerField(blank=True, null=True, verbose_name='DNA concentration (nM)')),
                ('chemistry_version', models.CharField(choices=[('VERSION_2', 'v2'), ('VERSION_3', 'v3')], default='VERSION_2', max_length=150, null=True, verbose_name='Chemistry Version')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical tenx library construction information',
                'db_table': 'tenx_history_library_construction_information',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxLibraryQuantificationAndStorage',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('agilent_bioanalyzer_xad', models.TextField(blank=True, max_length=200, null=True, verbose_name='Agilent bioanalyzer xad file')),
                ('agilent_bioanalyzer_image', models.TextField(blank=True, max_length=200, null=True, verbose_name='Agilent bioanalyzer image file')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical tenx library quantification and storage',
                'db_table': 'tenx_history_library_q_and_s',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxLibrarySampleDetail',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('sample_prep_date', models.DateField(blank=True, null=True, verbose_name='Sample prep date')),
                ('sorting_location', models.CharField(blank=True, default='TFL flow facility', max_length=50, null=True, verbose_name='Sorting location')),
                ('num_cells_targeted', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Number of cells targeted')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('lims_vial_barcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='LIMS vial barcode')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical tenx library sample detail',
                'db_table': 'tenx_history_library_sample_detail',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxSequencing',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N500', 'NextSeq500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='HX', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('submission_date', models.DateField(default=datetime.date.today, verbose_name='Submission date')),
                ('sequencer_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencer ID')),
                ('sequencing_center', models.CharField(choices=[('BCCAGSC', 'BCCAGSC'), ('UBCBRC', 'UBCBRC')], default='BCCAGSC', max_length=50, null=True, verbose_name='Sequencing center')),
                ('sequencer_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sequencing notes')),
                ('gsc_library_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='GSC Library ID')),
                ('number_of_lanes_requested', models.PositiveIntegerField(default=1, verbose_name='Sequencing Goal')),
                ('lane_requested_date', models.DateField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical tenx sequencing',
                'db_table': 'tenx_history_sequencing',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='TenxAnalysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_type', models.CharField(blank=True, choices=[('DLP', 'DLP'), ('PBAL', 'PBAL'), ('TENX', 'TenX')], max_length=50, verbose_name='Input Type')),
                ('version', models.CharField(max_length=50, null=True, verbose_name='Analysis Version')),
                ('jira_ticket', models.CharField(max_length=50, null=True, verbose_name='Analysis Jira Ticket')),
                ('run_status', models.CharField(choices=[('idle', 'Idle'), ('error', 'Error'), ('running', 'Running'), ('archiving', 'Archiving'), ('complete', 'Complete'), ('align_complete', 'Align Complete'), ('hmmcopy_complete', 'Hmmcopy Complete')], default='idle', max_length=50, verbose_name='Run Status')),
                ('last_updated_date', models.DateTimeField(auto_now=True, verbose_name='Last Updated Date')),
                ('submission_date', models.DateField(default=datetime.date.today, verbose_name='Analysis Submission Date')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxChip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lab_name', models.CharField(blank=True, choices=[('SA', 'Sam Aparicio'), ('DH', 'David Huntsman')], default='SA', max_length=50, null=True, verbose_name='Lab Name')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxLane',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flow_cell_id', models.CharField(max_length=50, verbose_name='Flow cell/Lane ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
                ('tantalus_datasets', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, null=True, size=None)),
                ('sequencing_date', models.DateTimeField(null=True)),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Library Name')),
                ('jira_ticket', models.CharField(blank=True, max_length=50, null=True, verbose_name='Jira ticket')),
                ('experimental_condition', models.CharField(blank=True, max_length=1025, null=True, verbose_name='Experimental condition')),
                ('num_sublibraries', models.IntegerField(blank=True, default=0, null=True, verbose_name='Number of sublibraries')),
                ('chip_well', models.IntegerField(choices=[(0, 'NOT SET'), (1, 'WELL_1'), (2, 'WELL_2'), (3, 'WELL_3'), (4, 'WELL_4'), (5, 'WELL_5'), (6, 'WELL_6'), (7, 'WELL_7'), (8, 'WELL_8')], default=0)),
                ('condition', models.CharField(blank=True, max_length=50, null=True, verbose_name='Condition')),
                ('google_sheet', models.CharField(blank=True, max_length=255, null=True, verbose_name='Google Sheet Link')),
                ('description', models.TextField(blank=True, max_length=1024, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('failed', models.BooleanField(default=False, verbose_name='Failed')),
                ('chips', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tenx.TenxChip', verbose_name='Chip')),
                ('projects', models.ManyToManyField(blank=True, to='core.Project', verbose_name='Project')),
                ('relates_to_dlp', models.ManyToManyField(blank=True, to='dlp.DlpLibrary', verbose_name='Relates to (DLP)')),
                ('relates_to_tenx', models.ManyToManyField(blank=True, to='tenx.TenxLibrary', verbose_name='Relates to (Tenx)')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Sample', verbose_name='Primary Sample')),
            ],
            options={
                'ordering': ['sample'],
            },
            bases=(models.Model, core.helpers.FieldValue, core.helpers.LibraryAssistant),
        ),
        migrations.CreateModel(
            name='TenxLibraryConstructionInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library_construction_method', models.CharField(blank=True, default='10x Genomics', max_length=50, null=True, verbose_name='Library construction method')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('library_prep_location', models.CharField(blank=True, default='UBC-BRC', max_length=50, null=True, verbose_name='Library prep location')),
                ('chip_lot_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Chip lot number')),
                ('reagent_lot_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Reagent lot number')),
                ('library_type', models.CharField(blank=True, choices=[("5'", "5'"), ("3'", "3'"), ('V(D)J', 'V(D)J')], max_length=20, null=True, verbose_name='Library type')),
                ('index_used', models.CharField(blank=True, choices=[('SI_GA-A1,GGTTTACT,CTAAACGG,TCGGCGTC,AACCGTAA', 'SI-GA_A1'), ('SI-GA-A2,TTTCATGA,ACGTCCCT,CGCATGTG,GAAGGAAC', 'SI-GA-A2'), ('SI-GA-A3,CAGTACTG,AGTAGTCT,GCAGTAGA,TTCCCGAC', 'SI-GA-A3'), ('SI-GA-A4,TATGATTC,CCCACAGT,ATGCTGAA,GGATGCCG', 'SI-GA-A4'), ('SI-GA-A5,CTAGGTGA,TCGTTCAG,AGCCAATT,GATACGCC', 'SI-GA-A5'), ('SI-GA-A6,CGCTATGT,GCTGTCCA,TTGAGATC,AAACCGAG', 'SI-GA-A6'), ('SI-GA-A7,ACAGAGGT,TATAGTTG,CGGTCCCA,GTCCTAAC', 'SI-GA-A7'), ('SI-GA-A8,GCATCTCC,TGTAAGGT,CTGCGATG,AACGTCAA', 'SI-GA-A8'), ('SI-GA-A9,TCTTAAAG,CGAGGCTC,GTCCTTCT,AAGACGGA', 'SI-GA-A9'), ('SI-GA-A10,GAAACCCT,TTTCTGTC,CCGTGTGA,AGCGAAAG', 'SI-GA-A10'), ('SI-GA-A11,GTCCGGTC,AAGATCAT,CCTGAAGG,TGATCTCA', 'SI-GA-A11'), ('SI-GA-A12,AGTGGAAC,GTCTCCTT,TCACATCA,CAGATGGG', 'SI-GA-A12'), ('SI-GA-B1,GTAATCTT,TCCGGAAG,AGTTCGGC,CAGCATCA', 'SI-GA-B1'), ('SI-GA-B2,TACTCTTC,CCTGTGCG,GGACACGT,ATGAGAAA', 'SI-GA-B2'), ('SI-GA-B3,GTGTATTA,TGTGCGGG,ACCATAAC,CAACGCCT', 'SI-GA-B3'), ('SI-GA-B4,ACTTCATA,GAGATGAC,TGCCGTGG,CTAGACCT', 'SI-GA-B4'), ('SI-GA-B5,AATAATGG,CCAGGGCA,TGCCTCAT,GTGTCATC', 'SI-GA-B5'), ('SI-GA-B6,CGTTAATC,GCCACGCT,TTACTCAG,AAGGGTGA', 'SI-GA-B6'), ('SI-GA-B7,AAACCTCA,GCCTTGGT,CTGGACTC,TGTAGAAG', 'SI-GA-B7'), ('SI-GA-B8,AAAGTGCT,GCTACCTG,TGCTGTAA,CTGCAAGC', 'SI-GA-B8'), ('SI-GA-B9,CTGTAACT,TCTAGCGA,AGAGTGTG,GACCCTAC', 'SI-GA-B9'), ('SI-GA-B10,ACCGTATG,GATTAGAT,CTGACTGA,TGACGCCC', 'SI-GA-B10'), ('SI-GA-B11,GTTCCTCA,AGGTACGC,TAAGTATG,CCCAGGAT', 'SI-GA-B11'), ('SI-GA-B12,TACCACCA,CTAAGTTT,GGGTCAAG,ACTGTGGC', 'SI-GA-B12'), ('SI-GA-C1,CCACTTAT,AACTGGCG,TTGGCATA,GGTAACGC', 'SI-GA-C1'), ('SI-GA-C2,CCTAGACC,ATCTCTGT,TAGCTCTA,GGAGAGAG', 'SI-GA-C2'), ('SI-GA-C3,TCAGCCGT,CAGAGGCC,GGTCAATA,ATCTTTAG', 'SI-GA-C3'), ('SI-GA-C4,ACAATTCA,TGCGCAGC,CATCACTT,GTGTGGAG', 'SI-GA-C4'), ('SI-GA-C5,CGACTTGA,TACAGACT,ATTGCGTG,GCGTACAC', 'SI-GA-C5'), ('SI-GA-C6,ATTACTTC,TGCGAACT,GCATTCGG,CAGCGGAA', 'SI-GA-C6'), ('SI-GA-C7,GTCTCTCG,AATCTCTC,CGGAGGGA,TCAGAAAT', 'SI-GA-C7'), ('SI-GA-C8,GTTGAGAA,AGATCTGG,TCGATACT,CACCGCTC', 'SI-GA-C8'), ('SI-GA-C9,GCGCAGAA,ATCTTACC,TATGGTGT,CGAACCTG', 'SI-GA-C9'), ('SI-GA-C10,TCTCAGTG,GAGACTAT,CGCTTAGC,ATAGGCCA', 'SI-GA-C10'), ('SI-GA-C11,GAGGATCT,AGACCATA,TCCTGCGC,CTTATGAG', 'SI-GA-C11'), ('SI-GA-C12,TCTCGTTT,GGCTAGCG,ATGACCGC,CAAGTAAA', 'SI-GA-C12'), ('SI-GA-D1,CACTCGGA,GCTGAATT,TGAAGTAC,ATGCTCCG', 'SI-GA-D1'), ('SI-GA-D2,TAACAAGG,GGTTCCTC,ATCATGCA,CCGGGTAT', 'SI-GA-D2'), ('SI-GA-D3,ACATTACT,TTTGGGTA,CAGCCCAC,GGCAATGG', 'SI-GA-D3'), ('SI-GA-D4,CCCTAACA,ATTCCGAT,TGGATTGC,GAAGGCTG', 'SI-GA-D4'), ('SI-GA-D5,CTCGTCAC,GATCAGCA,ACAACAGG,TGGTGTTT', 'SI-GA-D5'), ('SI-GA-D6,CATGCGAT,TGATATTC,GTGATCGA,ACCCGACG', 'SI-GA-D6'), ('SI-GA-D7,ATTTGCTA,TAGACACC,CCACAGGG,GGCGTTAT', 'SI-GA-D7'), ('SI-GA-D8,GCAACAAA,TAGTTGTC,CGCCATCG,ATTGGCGT', 'SI-GA-D8'), ('SI-GA-D9,AGGAGATG,GATGTGGT,CTACATCC,TCCTCCAA', 'SI-GA-D9'), ('SI-GA-D10,CAATACCC,TGTCTATG,ACCACGAA,GTGGGTGT', 'SI-GA-D10'), ('SI-GA-D11,CTTTGCGG,TGCACAAA,AAGCAGTC,GCAGTTCT', 'SI-GA-D11'), ('SI-GA-D12,GCACAATG,CTTGGTAC,TGCACCGT,AAGTTGCA', 'SI-GA-D12'), ('SI-GA-E1,TGGTAAAC,GAAAGGGT,ACTGCTCG,CTCCTCTA', 'SI-GA-E1'), ('SI-GA-E2,GTGGTACC,TACTATAG,ACAAGGTA,CGTCCCGT', 'SI-GA-E2'), ('SI-GA-E3,AGGTATTG,CTCCTAGT,TCAAGGCC,GATGCCAA', 'SI-GA-E3'), ('SI-GA-E4,TTCGCCCT,GGATGGGC,AATCAATG,CCGATTAA', 'SI-GA-E4'), ('SI-GA-E5,CATTAGCG,TTCGCTGA,ACAAGAAT,GGGCTCTC', 'SI-GA-E5'), ('SI-GA-E6,CTGCGGCT,GACTCAAA,AGAAACTC,TCTGTTGG', 'SI-GA-E6'), ('SI-GA-E7,CACGCCTT,GTATATAG,TCTCGGGC,AGGATACA', 'SI-GA-E7'), ('SI-GA-E8,ATAGTTAC,TGCTGAGT,CCTACGTA,GAGCACCG', 'SI-GA-E8'), ('SI-GA-E9,TTGTTTCC,GGAGGAGG,CCTAACAA,AACCCGTT', 'SI-GA-E9'), ('SI-GA-E10,AAATGTGC,GGGCAAAT,TCTATCCG,CTCGCGTA', 'SI-GA-E10'), ('SI-GA-E11,AAGCGCTG,CGTTTGAT,GTAGCACA,TCCAATGC', 'SI-GA-E11'), ('SI-GA-E12,ACCGGCTC,GAGTTAGT,CGTCCTAG,TTAAAGCA', 'SI-GA-E12'), ('SI-GA-F1,GTTGCAGC,TGGAATTA,CAATGGAG,ACCCTCCT', 'SI-GA-F1'), ('SI-GA-F2,TTTACATG,CGCGATAC,ACGCGGGT,GAATTCCA', 'SI-GA-F2'), ('SI-GA-F3,TTCAGGTG,ACGGACAT,GATCTTGA,CGATCACC', 'SI-GA-F3'), ('SI-GA-F4,CCCAATAG,GTGTCGCT,AGAGTCGC,TATCGATA', 'SI-GA-F4'), ('SI-GA-F5,GACTACGT,CTAGCGAG,TCTATATC,AGGCGTCA', 'SI-GA-F5'), ('SI-GA-F6,CGGAGCAC,GACCTATT,ACTTAGGA,TTAGCTCG', 'SI-GA-F6'), ('SI-GA-F7,CGTGCAGA,AACAAGAT,TCGCTTCG,GTATGCTC', 'SI-GA-F7'), ('SI-GA-F8,CATGAACA,TCACTCGC,AGCTGGAT,GTGACTTG', 'SI-GA-F8'), ('SI-GA-F9,CAAGCTCC,GTTCACTG,TCGTGAAA,AGCATGGT', 'SI-GA-F9'), ('SI-GA-F10,GCTTGGCT,AAACAAAC,CGGGCTTA,TTCATCGG', 'SI-GA-F10'), ('SI-GA-F11,GCGAGAGT,TACGTTCA,AGTCCCAC,CTATAGTG', 'SI-GA-F11'), ('SI-GA-F12,TGATGCAT,GCTACTGA,CACCTGCC,ATGGAATG', 'SI-GA-F12'), ('SI-GA-G1,ATGAATCT,GATCTCAG,CCAGGAGC,TGCTCGTA', 'SI-GA-G1'), ('SI-GA-G2,TGATTCTA,ACTAGGAG,CAGCCACT,GTCGATGC', 'SI-GA-G2'), ('SI-GA-G3,CCTCATTC,AGCATCCG,GTGGCAAT,TAATGGGA', 'SI-GA-G3'), ('SI-GA-G4,GCGATGTG,AGATACAA,TTTCCACT,CACGGTGC', 'SI-GA-G4'), ('SI-GA-G5,GAGCAAGA,TCTGTGAT,CGCAGTTC,ATATCCCG', 'SI-GA-G5'), ('SI-GA-G6,CTGACGCG,GGTCGTAC,TCCTTCTT,AAAGAAGA', 'SI-GA-G6'), ('SI-GA-G7,GGTATGCA,CTCGAAAT,ACACCTTC,TAGTGCGG', 'SI-GA-G7'), ('SI-GA-G8,TATGAGCT,CCGATAGC,ATACCCAA,GGCTGTTG', 'SI-GA-G8'), ('SI-GA-G9,TAGGACGT,ATCCCACA,GGAATGTC,CCTTGTAG', 'SI-GA-G9'), ('SI-GA-G10,TCGCCAGC,AATGTTAG,CGATAGCT,GTCAGCTA', 'SI-GA-G10'), ('SI-GA-G11,TTATCGTT,AGCAGAGC,CATCTCCA,GCGGATAG', 'SI-GA-G11'), ('SI-GA-G12,ATTCTAAG,CCCGATTA,TGGAGGCT,GAATCCGC', 'SI-GA-G12'), ('SI-GA-H1,GTATGTCA,TGTCAGAC,CACGTCGG,ACGACATT', 'SI-GA-H1'), ('SI-GA-H2,TAATGACC,ATGCCTTA,GCCGAGAT,CGTATCGG', 'SI-GA-H2'), ('SI-GA-H3,CCAAGATG,AGGCCCGA,TACGTGAC,GTTTATCT', 'SI-GA-H3'), ('SI-GA-H4,GCCATTCC,CAAGAATT,TTGCCGGA,AGTTGCAG', 'SI-GA-H4'), ('SI-GA-H5,CCACTACA,GATTCTGG,TGCGGCTT,ATGAAGAC', 'SI-GA-H5'), ('SI-GA-H6,TAGGATAA,CCTTTGTC,GTACGCGG,AGCACACT', 'SI-GA-H6'), ('SI-GA-H7,AGCTATCA,CATATAAC,TCAGGGTG,GTGCCCGT', 'SI-GA-H7'), ('SI-GA-H8,TTGTTGAT,GCTCAACC,CAAAGTGG,AGCGCCTA', 'SI-GA-H8'), ('SI-GA-H9,ACACTGTT,CAGGATGG,GGCTGAAC,TTTACCCA', 'SI-GA-H9'), ('SI-GA-H10,GTAATTGC,AGTCGCTT,CACGAGAA,TCGTCACG', 'SI-GA-H10'), ('SI-GA-H11,GGCGAGTA,ACTTCTAT,CAAATACG,TTGCGCGC', 'SI-GA-H11'), ('SI-GA-H12,GACAGCAT,TTTGTACA,AGGCCGTG,CCATATGC', 'SI-GA-H12')], max_length=150, null=True, verbose_name='Index used')),
                ('pool', models.CharField(blank=True, max_length=150, null=True, verbose_name='Pool')),
                ('concentration', models.PositiveIntegerField(blank=True, null=True, verbose_name='DNA concentration (nM)')),
                ('chemistry_version', models.CharField(choices=[('VERSION_2', 'v2'), ('VERSION_3', 'v3')], default='VERSION_2', max_length=150, null=True, verbose_name='Chemistry Version')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenx.TenxLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxLibraryQuantificationAndStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agilent_bioanalyzer_xad', models.FileField(blank=True, max_length=200, null=True, upload_to=core.helpers.upload_tenx_library_path, verbose_name='Agilent bioanalyzer xad file')),
                ('agilent_bioanalyzer_image', models.FileField(blank=True, max_length=200, null=True, upload_to=core.helpers.upload_tenx_library_path, verbose_name='Agilent bioanalyzer image file')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenx.TenxLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxLibrarySampleDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_prep_date', models.DateField(blank=True, null=True, verbose_name='Sample prep date')),
                ('sorting_location', models.CharField(blank=True, default='TFL flow facility', max_length=50, null=True, verbose_name='Sorting location')),
                ('num_cells_targeted', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Number of cells targeted')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('lims_vial_barcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='LIMS vial barcode')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenx.TenxLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxPool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pool_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Pool Name')),
                ('gsc_pool_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='GSC Pool Name')),
                ('construction_location', models.CharField(blank=True, choices=[('BCCAGSC', 'GSC'), ('UBCBRC', 'UBC')], max_length=50, null=True, verbose_name='Construction Location')),
                ('constructed_by', models.CharField(blank=True, max_length=50, null=True, verbose_name='Constructed By')),
                ('constructed_date', models.DateField(blank=True, null=True, verbose_name='Construction Date')),
                ('libraries', models.ManyToManyField(to='tenx.TenxLibrary')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxSequencing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N500', 'NextSeq500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='HX', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('submission_date', models.DateField(default=datetime.date.today, verbose_name='Submission date')),
                ('sequencer_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencer ID')),
                ('sequencing_center', models.CharField(choices=[('BCCAGSC', 'BCCAGSC'), ('UBCBRC', 'UBCBRC')], default='BCCAGSC', max_length=50, null=True, verbose_name='Sequencing center')),
                ('sequencer_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sequencing notes')),
                ('gsc_library_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='GSC Library ID')),
                ('number_of_lanes_requested', models.PositiveIntegerField(default=1, verbose_name='Sequencing Goal')),
                ('lane_requested_date', models.DateField(null=True)),
                ('library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenx.TenxLibrary', verbose_name='Library')),
                ('tenx_analysis', models.ManyToManyField(blank=True, to='tenx.TenxAnalysis', verbose_name='Tenx Analysis')),
                ('tenx_pool', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenx.TenxPool')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.AddField(
            model_name='tenxlane',
            name='sequencing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tenx.TenxSequencing', verbose_name='Sequencing'),
        ),
        migrations.AddField(
            model_name='tenxanalysis',
            name='tenx_lanes',
            field=models.ManyToManyField(blank=True, to='tenx.TenxLane'),
        ),
        migrations.AddField(
            model_name='tenxanalysis',
            name='tenx_library',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tenx.TenxLibrary'),
        ),
        migrations.AddField(
            model_name='historicaltenxsequencing',
            name='library',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tenx.TenxLibrary', verbose_name='Library'),
        ),
        migrations.AddField(
            model_name='historicaltenxsequencing',
            name='tenx_pool',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tenx.TenxPool'),
        ),
        migrations.AddField(
            model_name='historicaltenxlibrarysampledetail',
            name='library',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tenx.TenxLibrary', verbose_name='Library'),
        ),
        migrations.AddField(
            model_name='historicaltenxlibraryquantificationandstorage',
            name='library',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tenx.TenxLibrary', verbose_name='Library'),
        ),
        migrations.AddField(
            model_name='historicaltenxlibraryconstructioninformation',
            name='library',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tenx.TenxLibrary', verbose_name='Library'),
        ),
        migrations.AddField(
            model_name='historicaltenxlibrary',
            name='chips',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tenx.TenxChip', verbose_name='Chip'),
        ),
        migrations.AddField(
            model_name='historicaltenxlibrary',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaltenxlibrary',
            name='sample',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Sample', verbose_name='Primary Sample'),
        ),
        migrations.AddField(
            model_name='historicaltenxlane',
            name='sequencing',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tenx.TenxSequencing', verbose_name='Sequencing'),
        ),
        migrations.AlterUniqueTogether(
            name='tenxsequencing',
            unique_together=set([('library', 'sequencing_center', 'sequencing_instrument')]),
        ),
    ]
